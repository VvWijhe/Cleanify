@startuml

skinparam classAttributeIconSize 0

package Server {

class Server {
  + <<constructor>> Server(port : unsigned short)
  + ~Server()
  + run() : void
  + stop() : void

  - service_ : Service
  - settings_ : shared_ptr<Settings>
  - thread_ : thread
}

}

package SystemControl {

class RoombaProcessing {
  + <<constructor>> RoombaProcessing()

  - roombaControl_ : RoombaControl
}

class SensorData {
  + <<constructor>> SensorParser(buffer : vector<unsigned char>)
  + parse(buffer : vector<unsigned char>) : void
  + data() const : json
  - content_ : json
}

class RoombaControl {
  + <<constructor>> RoombaControl()
  + init() : int
  + resetDevices() : void
  + sendData(data : const vector<unsigned char>&)
  + setWheels(ls : short, rs : short) : void
  + setWheels(speed : short) : void
  + setRotation(speed : short, direction : enum) : void
  + setLed(color : enum) : void
  + readSensors() const : SensorData
  + getCmds() const : map<string, unsigned char>

  - commands_ : map<string, unsigned char>
  - devices_ : map< string, vector<shared_pointer<Device>> >
  - <u>serial_ : SerialPort
}

}

package IO {

class SerialPort {
  + <<constructor>> SerialPort(port : string, baud : baud_t)
  + open() : int
  + close() : int
  + writeVector(data : const vector<unsigned char>&) : int
  + read(buffer : vector<unsigned char>&) : int
  + getStatus() const : int

  - status_ : int
}

}

package subsystems {
abstract class Device {
  + <<constructor>>Device(serial : SerialPort)
  + <i>~Device() : void
  + <i>reset() : void
  + <i>sendData(data : const vector<unsigned char>&) : void

  - <u>serial_ : SerialPort
}

Motor --|> Device
class Motor {
  + <<constructor>>Motor(serial : SerialPort)
  + <i>~Motor() : void
  + <i>reset() : void
  + <i>sendData(data : const vector<unsigned char>&) : void
}
}

SerialPort "1" --* Device : contains
RoombaProcessing *-- "1" RoombaControl : contains
RoombaControl -- SensorData : uses
RoombaControl *-- "*" Device
RoombaControl *-- "1" SerialPort

@enduml